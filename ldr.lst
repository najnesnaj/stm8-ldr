                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Jul  5 2014) (Linux)
                                      4 ; This file was generated Sun Sep 10 20:11:45 2017
                                      5 ;--------------------------------------------------------
                                      6 	.module ldr
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _main
                                     13 	.globl _InitializeUART
                                     14 	.globl _print_UCHAR_hex
                                     15 	.globl _UARTPrintF
                                     16 	.globl _delay
                                     17 	.globl _InitializeSystemClock
                                     18 	.globl _delayTenMicro
                                     19 ;--------------------------------------------------------
                                     20 ; ram data
                                     21 ;--------------------------------------------------------
                                     22 	.area DATA
                                     23 ;--------------------------------------------------------
                                     24 ; ram data
                                     25 ;--------------------------------------------------------
                                     26 	.area INITIALIZED
                                     27 ;--------------------------------------------------------
                                     28 ; Stack segment in internal ram 
                                     29 ;--------------------------------------------------------
                                     30 	.area	SSEG
      000000                         31 __start__stack:
      000000                         32 	.ds	1
                                     33 
                                     34 ;--------------------------------------------------------
                                     35 ; absolute external ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area DABS (ABS)
                                     38 ;--------------------------------------------------------
                                     39 ; interrupt vector 
                                     40 ;--------------------------------------------------------
                                     41 	.area HOME
      000000                         42 __interrupt_vect:
      000000 82v00u00u00             43 	int s_GSINIT ;reset
      000004 82 00 00 00             44 	int 0x0000 ;trap
      000008 82 00 00 00             45 	int 0x0000 ;int0
      00000C 82 00 00 00             46 	int 0x0000 ;int1
      000010 82 00 00 00             47 	int 0x0000 ;int2
      000014 82 00 00 00             48 	int 0x0000 ;int3
      000018 82 00 00 00             49 	int 0x0000 ;int4
      00001C 82 00 00 00             50 	int 0x0000 ;int5
      000020 82 00 00 00             51 	int 0x0000 ;int6
      000024 82 00 00 00             52 	int 0x0000 ;int7
      000028 82 00 00 00             53 	int 0x0000 ;int8
      00002C 82 00 00 00             54 	int 0x0000 ;int9
      000030 82 00 00 00             55 	int 0x0000 ;int10
      000034 82 00 00 00             56 	int 0x0000 ;int11
      000038 82 00 00 00             57 	int 0x0000 ;int12
      00003C 82 00 00 00             58 	int 0x0000 ;int13
      000040 82 00 00 00             59 	int 0x0000 ;int14
      000044 82 00 00 00             60 	int 0x0000 ;int15
      000048 82 00 00 00             61 	int 0x0000 ;int16
      00004C 82 00 00 00             62 	int 0x0000 ;int17
      000050 82 00 00 00             63 	int 0x0000 ;int18
      000054 82 00 00 00             64 	int 0x0000 ;int19
      000058 82 00 00 00             65 	int 0x0000 ;int20
      00005C 82 00 00 00             66 	int 0x0000 ;int21
      000060 82 00 00 00             67 	int 0x0000 ;int22
      000064 82 00 00 00             68 	int 0x0000 ;int23
      000068 82 00 00 00             69 	int 0x0000 ;int24
      00006C 82 00 00 00             70 	int 0x0000 ;int25
      000070 82 00 00 00             71 	int 0x0000 ;int26
      000074 82 00 00 00             72 	int 0x0000 ;int27
      000078 82 00 00 00             73 	int 0x0000 ;int28
      00007C 82 00 00 00             74 	int 0x0000 ;int29
                                     75 ;--------------------------------------------------------
                                     76 ; global & static initialisations
                                     77 ;--------------------------------------------------------
                                     78 	.area HOME
                                     79 	.area GSINIT
                                     80 	.area GSFINAL
                                     81 	.area GSINIT
      000000                         82 __sdcc_gs_init_startup:
      000000                         83 __sdcc_init_data:
                                     84 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]   85 	ldw x, #l_DATA
      000003 27 07            [ 1]   86 	jreq	00002$
      000005                         87 00001$:
      000005 72 4FuFFuFF      [ 1]   88 	clr (s_DATA - 1, x)
      000009 5A               [ 2]   89 	decw x
      00000A 26 F9            [ 1]   90 	jrne	00001$
      00000C                         91 00002$:
      00000C AEr00r00         [ 2]   92 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]   93 	jreq	00004$
      000011                         94 00003$:
      000011 D6uFFuFF         [ 1]   95 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]   96 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]   97 	decw	x
      000018 26 F7            [ 1]   98 	jrne	00003$
      00001A                         99 00004$:
                                    100 ; stm8_genXINIT() end
                                    101 	.area GSFINAL
      000000 CCr00r80         [ 2]  102 	jp	__sdcc_program_startup
                                    103 ;--------------------------------------------------------
                                    104 ; Home
                                    105 ;--------------------------------------------------------
                                    106 	.area HOME
                                    107 	.area HOME
      000080                        108 __sdcc_program_startup:
      000080 CCr01r7B         [ 2]  109 	jp	_main
                                    110 ;	return from main will return to caller
                                    111 ;--------------------------------------------------------
                                    112 ; code
                                    113 ;--------------------------------------------------------
                                    114 	.area CODE
                                    115 ;	ldr.c: 27: void delayTenMicro (void) {
                                    116 ;	-----------------------------------------
                                    117 ;	 function delayTenMicro
                                    118 ;	-----------------------------------------
      000000                        119 _delayTenMicro:
                                    120 ;	ldr.c: 29: for (a = 0; a < 50; ++a)
      000000 A6 32            [ 1]  121 	ld	a, #0x32
      000002                        122 00104$:
                                    123 ;	ldr.c: 30: __asm__("nop");
      000002 9D               [ 1]  124 	nop
      000003 4A               [ 1]  125 	dec	a
                                    126 ;	ldr.c: 29: for (a = 0; a < 50; ++a)
      000004 4D               [ 1]  127 	tnz	a
      000005 26 FB            [ 1]  128 	jrne	00104$
      000007 81               [ 4]  129 	ret
                                    130 ;	ldr.c: 32: void InitializeSystemClock() {
                                    131 ;	-----------------------------------------
                                    132 ;	 function InitializeSystemClock
                                    133 ;	-----------------------------------------
      000008                        134 _InitializeSystemClock:
                                    135 ;	ldr.c: 33: CLK_ICKR = 0;                       //  Reset the Internal Clock Register.
      000008 AE 50 C0         [ 2]  136 	ldw	x, #0x50c0
      00000B 7F               [ 1]  137 	clr	(x)
                                    138 ;	ldr.c: 34: CLK_ICKR = CLK_HSIEN;               //  Enable the HSI.
      00000C AE 50 C0         [ 2]  139 	ldw	x, #0x50c0
      00000F A6 01            [ 1]  140 	ld	a, #0x01
      000011 F7               [ 1]  141 	ld	(x), a
                                    142 ;	ldr.c: 35: CLK_ECKR = 0;                       //  Disable the external clock.
      000012 AE 50 C1         [ 2]  143 	ldw	x, #0x50c1
      000015 7F               [ 1]  144 	clr	(x)
                                    145 ;	ldr.c: 36: while ((CLK_ICKR & CLK_HSIRDY) == 0);       //  Wait for the HSI to be ready for use.
      000016                        146 00101$:
      000016 AE 50 C0         [ 2]  147 	ldw	x, #0x50c0
      000019 F6               [ 1]  148 	ld	a, (x)
      00001A A5 02            [ 1]  149 	bcp	a, #0x02
      00001C 27 F8            [ 1]  150 	jreq	00101$
                                    151 ;	ldr.c: 37: CLK_CKDIVR = 0;                     //  Ensure the clocks are running at full speed.
      00001E AE 50 C6         [ 2]  152 	ldw	x, #0x50c6
      000021 7F               [ 1]  153 	clr	(x)
                                    154 ;	ldr.c: 38: CLK_PCKENR1 = 0xff;                 //  Enable all peripheral clocks.
      000022 AE 50 C7         [ 2]  155 	ldw	x, #0x50c7
      000025 A6 FF            [ 1]  156 	ld	a, #0xff
      000027 F7               [ 1]  157 	ld	(x), a
                                    158 ;	ldr.c: 39: CLK_PCKENR2 = 0xff;                 //  Ditto.
      000028 AE 50 CA         [ 2]  159 	ldw	x, #0x50ca
      00002B A6 FF            [ 1]  160 	ld	a, #0xff
      00002D F7               [ 1]  161 	ld	(x), a
                                    162 ;	ldr.c: 40: CLK_CCOR = 0;                       //  Turn off CCO.
      00002E AE 50 C9         [ 2]  163 	ldw	x, #0x50c9
      000031 7F               [ 1]  164 	clr	(x)
                                    165 ;	ldr.c: 41: CLK_HSITRIMR = 0;                   //  Turn off any HSIU trimming.
      000032 AE 50 CC         [ 2]  166 	ldw	x, #0x50cc
      000035 7F               [ 1]  167 	clr	(x)
                                    168 ;	ldr.c: 42: CLK_SWIMCCR = 0;                    //  Set SWIM to run at clock / 2.
      000036 AE 50 CD         [ 2]  169 	ldw	x, #0x50cd
      000039 7F               [ 1]  170 	clr	(x)
                                    171 ;	ldr.c: 43: CLK_SWR = 0xe1;                     //  Use HSI as the clock source.
      00003A AE 50 C4         [ 2]  172 	ldw	x, #0x50c4
      00003D A6 E1            [ 1]  173 	ld	a, #0xe1
      00003F F7               [ 1]  174 	ld	(x), a
                                    175 ;	ldr.c: 44: CLK_SWCR = 0;                       //  Reset the clock switch control register.
      000040 AE 50 C5         [ 2]  176 	ldw	x, #0x50c5
      000043 7F               [ 1]  177 	clr	(x)
                                    178 ;	ldr.c: 45: CLK_SWCR = CLK_SWEN;                //  Enable switching.
      000044 AE 50 C5         [ 2]  179 	ldw	x, #0x50c5
      000047 A6 02            [ 1]  180 	ld	a, #0x02
      000049 F7               [ 1]  181 	ld	(x), a
                                    182 ;	ldr.c: 46: while ((CLK_SWCR & CLK_SWBSY) != 0);        //  Pause while the clock switch is busy.
      00004A                        183 00104$:
      00004A AE 50 C5         [ 2]  184 	ldw	x, #0x50c5
      00004D F6               [ 1]  185 	ld	a, (x)
      00004E 44               [ 1]  186 	srl	a
      00004F 25 F9            [ 1]  187 	jrc	00104$
      000051 81               [ 4]  188 	ret
                                    189 ;	ldr.c: 48: void delay (int time_ms) {
                                    190 ;	-----------------------------------------
                                    191 ;	 function delay
                                    192 ;	-----------------------------------------
      000052                        193 _delay:
      000052 52 0A            [ 2]  194 	sub	sp, #10
                                    195 ;	ldr.c: 50: for (x = 0; x < 1036*time_ms; ++x)
      000054 5F               [ 1]  196 	clrw	x
      000055 1F 03            [ 2]  197 	ldw	(0x03, sp), x
      000057 1F 01            [ 2]  198 	ldw	(0x01, sp), x
      000059 1E 0D            [ 2]  199 	ldw	x, (0x0d, sp)
      00005B 89               [ 2]  200 	pushw	x
      00005C 4B 0C            [ 1]  201 	push	#0x0c
      00005E 4B 04            [ 1]  202 	push	#0x04
      000060 CDr00r00         [ 4]  203 	call	__mulint
      000063 5B 04            [ 2]  204 	addw	sp, #4
      000065 1F 09            [ 2]  205 	ldw	(0x09, sp), x
      000067                        206 00103$:
      000067 16 09            [ 2]  207 	ldw	y, (0x09, sp)
      000069 17 07            [ 2]  208 	ldw	(0x07, sp), y
      00006B 7B 07            [ 1]  209 	ld	a, (0x07, sp)
      00006D 49               [ 1]  210 	rlc	a
      00006E 4F               [ 1]  211 	clr	a
      00006F A2 00            [ 1]  212 	sbc	a, #0x00
      000071 6B 06            [ 1]  213 	ld	(0x06, sp), a
      000073 6B 05            [ 1]  214 	ld	(0x05, sp), a
      000075 1E 03            [ 2]  215 	ldw	x, (0x03, sp)
      000077 13 07            [ 2]  216 	cpw	x, (0x07, sp)
      000079 7B 02            [ 1]  217 	ld	a, (0x02, sp)
      00007B 12 06            [ 1]  218 	sbc	a, (0x06, sp)
      00007D 7B 01            [ 1]  219 	ld	a, (0x01, sp)
      00007F 12 05            [ 1]  220 	sbc	a, (0x05, sp)
      000081 2E 17            [ 1]  221 	jrsge	00105$
                                    222 ;	ldr.c: 51: __asm__("nop");
      000083 9D               [ 1]  223 	nop
                                    224 ;	ldr.c: 50: for (x = 0; x < 1036*time_ms; ++x)
      000084 16 03            [ 2]  225 	ldw	y, (0x03, sp)
      000086 72 A9 00 01      [ 2]  226 	addw	y, #0x0001
      00008A 7B 02            [ 1]  227 	ld	a, (0x02, sp)
      00008C A9 00            [ 1]  228 	adc	a, #0x00
      00008E 97               [ 1]  229 	ld	xl, a
      00008F 7B 01            [ 1]  230 	ld	a, (0x01, sp)
      000091 A9 00            [ 1]  231 	adc	a, #0x00
      000093 95               [ 1]  232 	ld	xh, a
      000094 17 03            [ 2]  233 	ldw	(0x03, sp), y
      000096 1F 01            [ 2]  234 	ldw	(0x01, sp), x
      000098 20 CD            [ 2]  235 	jra	00103$
      00009A                        236 00105$:
      00009A 5B 0A            [ 2]  237 	addw	sp, #10
      00009C 81               [ 4]  238 	ret
                                    239 ;	ldr.c: 56: void UARTPrintF (char *message) {
                                    240 ;	-----------------------------------------
                                    241 ;	 function UARTPrintF
                                    242 ;	-----------------------------------------
      00009D                        243 _UARTPrintF:
                                    244 ;	ldr.c: 57: char *ch = message;
      00009D 16 03            [ 2]  245 	ldw	y, (0x03, sp)
                                    246 ;	ldr.c: 58: while (*ch) {
      00009F                        247 00104$:
      00009F 90 F6            [ 1]  248 	ld	a, (y)
      0000A1 4D               [ 1]  249 	tnz	a
      0000A2 27 0F            [ 1]  250 	jreq	00107$
                                    251 ;	ldr.c: 59: UART1_DR = (unsigned char) *ch;     //  Put the next character into the data transmission register.
      0000A4 AE 52 31         [ 2]  252 	ldw	x, #0x5231
      0000A7 F7               [ 1]  253 	ld	(x), a
                                    254 ;	ldr.c: 60: while ((UART1_SR & SR_TXE) == 0);   //  Wait for transmission to complete.
      0000A8                        255 00101$:
      0000A8 AE 52 30         [ 2]  256 	ldw	x, #0x5230
      0000AB F6               [ 1]  257 	ld	a, (x)
      0000AC 48               [ 1]  258 	sll	a
      0000AD 24 F9            [ 1]  259 	jrnc	00101$
                                    260 ;	ldr.c: 61: ch++;                               //  Grab the next character.
      0000AF 90 5C            [ 2]  261 	incw	y
      0000B1 20 EC            [ 2]  262 	jra	00104$
      0000B3                        263 00107$:
      0000B3 81               [ 4]  264 	ret
                                    265 ;	ldr.c: 64: void print_UCHAR_hex (unsigned char buffer) {
                                    266 ;	-----------------------------------------
                                    267 ;	 function print_UCHAR_hex
                                    268 ;	-----------------------------------------
      0000B4                        269 _print_UCHAR_hex:
      0000B4 52 0C            [ 2]  270 	sub	sp, #12
                                    271 ;	ldr.c: 67: a = (buffer >> 4);
      0000B6 7B 0F            [ 1]  272 	ld	a, (0x0f, sp)
      0000B8 4E               [ 1]  273 	swap	a
      0000B9 A4 0F            [ 1]  274 	and	a, #0x0f
      0000BB 5F               [ 1]  275 	clrw	x
      0000BC 97               [ 1]  276 	ld	xl, a
                                    277 ;	ldr.c: 68: if (a > 9)
      0000BD A3 00 09         [ 2]  278 	cpw	x, #0x0009
      0000C0 2D 07            [ 1]  279 	jrsle	00102$
                                    280 ;	ldr.c: 69: a = a + 'a' - 10;
      0000C2 1C 00 57         [ 2]  281 	addw	x, #0x0057
      0000C5 1F 01            [ 2]  282 	ldw	(0x01, sp), x
      0000C7 20 05            [ 2]  283 	jra	00103$
      0000C9                        284 00102$:
                                    285 ;	ldr.c: 71: a += '0'; 
      0000C9 1C 00 30         [ 2]  286 	addw	x, #0x0030
      0000CC 1F 01            [ 2]  287 	ldw	(0x01, sp), x
      0000CE                        288 00103$:
                                    289 ;	ldr.c: 72: b = buffer & 0x0f;
      0000CE 7B 0F            [ 1]  290 	ld	a, (0x0f, sp)
      0000D0 A4 0F            [ 1]  291 	and	a, #0x0f
      0000D2 5F               [ 1]  292 	clrw	x
      0000D3 97               [ 1]  293 	ld	xl, a
                                    294 ;	ldr.c: 73: if (b > 9)
      0000D4 A3 00 09         [ 2]  295 	cpw	x, #0x0009
      0000D7 2D 07            [ 1]  296 	jrsle	00105$
                                    297 ;	ldr.c: 74: b = b + 'a' - 10;
      0000D9 1C 00 57         [ 2]  298 	addw	x, #0x0057
      0000DC 1F 0B            [ 2]  299 	ldw	(0x0b, sp), x
      0000DE 20 05            [ 2]  300 	jra	00106$
      0000E0                        301 00105$:
                                    302 ;	ldr.c: 76: b += '0'; 
      0000E0 1C 00 30         [ 2]  303 	addw	x, #0x0030
      0000E3 1F 0B            [ 2]  304 	ldw	(0x0b, sp), x
      0000E5                        305 00106$:
                                    306 ;	ldr.c: 77: message[0] = a;
      0000E5 90 96            [ 1]  307 	ldw	y, sp
      0000E7 72 A9 00 03      [ 2]  308 	addw	y, #3
      0000EB 7B 02            [ 1]  309 	ld	a, (0x02, sp)
      0000ED 90 F7            [ 1]  310 	ld	(y), a
                                    311 ;	ldr.c: 78: message[1] = b;
      0000EF 93               [ 1]  312 	ldw	x, y
      0000F0 5C               [ 2]  313 	incw	x
      0000F1 7B 0C            [ 1]  314 	ld	a, (0x0c, sp)
      0000F3 F7               [ 1]  315 	ld	(x), a
                                    316 ;	ldr.c: 79: message[2] = 0;
      0000F4 93               [ 1]  317 	ldw	x, y
      0000F5 5C               [ 2]  318 	incw	x
      0000F6 5C               [ 2]  319 	incw	x
      0000F7 7F               [ 1]  320 	clr	(x)
                                    321 ;	ldr.c: 80: UARTPrintF (message);
      0000F8 90 89            [ 2]  322 	pushw	y
      0000FA CDr00r9D         [ 4]  323 	call	_UARTPrintF
      0000FD 5B 02            [ 2]  324 	addw	sp, #2
      0000FF 5B 0C            [ 2]  325 	addw	sp, #12
      000101 81               [ 4]  326 	ret
                                    327 ;	ldr.c: 83: void InitializeUART() {
                                    328 ;	-----------------------------------------
                                    329 ;	 function InitializeUART
                                    330 ;	-----------------------------------------
      000102                        331 _InitializeUART:
                                    332 ;	ldr.c: 93: UART1_CR1 = 0;
      000102 AE 52 34         [ 2]  333 	ldw	x, #0x5234
      000105 7F               [ 1]  334 	clr	(x)
                                    335 ;	ldr.c: 94: UART1_CR2 = 0;
      000106 AE 52 35         [ 2]  336 	ldw	x, #0x5235
      000109 7F               [ 1]  337 	clr	(x)
                                    338 ;	ldr.c: 95: UART1_CR4 = 0;
      00010A AE 52 37         [ 2]  339 	ldw	x, #0x5237
      00010D 7F               [ 1]  340 	clr	(x)
                                    341 ;	ldr.c: 96: UART1_CR3 = 0;
      00010E AE 52 36         [ 2]  342 	ldw	x, #0x5236
      000111 7F               [ 1]  343 	clr	(x)
                                    344 ;	ldr.c: 97: UART1_CR5 = 0;
      000112 AE 52 38         [ 2]  345 	ldw	x, #0x5238
      000115 7F               [ 1]  346 	clr	(x)
                                    347 ;	ldr.c: 98: UART1_GTR = 0;
      000116 AE 52 39         [ 2]  348 	ldw	x, #0x5239
      000119 7F               [ 1]  349 	clr	(x)
                                    350 ;	ldr.c: 99: UART1_PSCR = 0;
      00011A AE 52 3A         [ 2]  351 	ldw	x, #0x523a
      00011D 7F               [ 1]  352 	clr	(x)
                                    353 ;	ldr.c: 103: UNSET (UART1_CR1, CR1_M);        //  8 Data bits.
      00011E AE 52 34         [ 2]  354 	ldw	x, #0x5234
      000121 F6               [ 1]  355 	ld	a, (x)
      000122 A4 EF            [ 1]  356 	and	a, #0xef
      000124 F7               [ 1]  357 	ld	(x), a
                                    358 ;	ldr.c: 104: UNSET (UART1_CR1, CR1_PCEN);     //  Disable parity.
      000125 AE 52 34         [ 2]  359 	ldw	x, #0x5234
      000128 F6               [ 1]  360 	ld	a, (x)
      000129 A4 FB            [ 1]  361 	and	a, #0xfb
      00012B F7               [ 1]  362 	ld	(x), a
                                    363 ;	ldr.c: 105: UNSET (UART1_CR3, CR3_STOPH);    //  1 stop bit.
      00012C AE 52 36         [ 2]  364 	ldw	x, #0x5236
      00012F F6               [ 1]  365 	ld	a, (x)
      000130 A4 DF            [ 1]  366 	and	a, #0xdf
      000132 F7               [ 1]  367 	ld	(x), a
                                    368 ;	ldr.c: 106: UNSET (UART1_CR3, CR3_STOPL);    //  1 stop bit.
      000133 AE 52 36         [ 2]  369 	ldw	x, #0x5236
      000136 F6               [ 1]  370 	ld	a, (x)
      000137 A4 EF            [ 1]  371 	and	a, #0xef
      000139 F7               [ 1]  372 	ld	(x), a
                                    373 ;	ldr.c: 107: UART1_BRR2 = 0x0a;      //  Set the baud rate registers to 115200 baud
      00013A AE 52 33         [ 2]  374 	ldw	x, #0x5233
      00013D A6 0A            [ 1]  375 	ld	a, #0x0a
      00013F F7               [ 1]  376 	ld	(x), a
                                    377 ;	ldr.c: 108: UART1_BRR1 = 0x08;      //  based upon a 16 MHz system clock.
      000140 AE 52 32         [ 2]  378 	ldw	x, #0x5232
      000143 A6 08            [ 1]  379 	ld	a, #0x08
      000145 F7               [ 1]  380 	ld	(x), a
                                    381 ;	ldr.c: 112: UNSET (UART1_CR2, CR2_TEN);      //  Disable transmit.
      000146 AE 52 35         [ 2]  382 	ldw	x, #0x5235
      000149 F6               [ 1]  383 	ld	a, (x)
      00014A A4 F7            [ 1]  384 	and	a, #0xf7
      00014C F7               [ 1]  385 	ld	(x), a
                                    386 ;	ldr.c: 113: UNSET (UART1_CR2, CR2_REN);      //  Disable receive.
      00014D AE 52 35         [ 2]  387 	ldw	x, #0x5235
      000150 F6               [ 1]  388 	ld	a, (x)
      000151 A4 FB            [ 1]  389 	and	a, #0xfb
      000153 F7               [ 1]  390 	ld	(x), a
                                    391 ;	ldr.c: 117: SET (UART1_CR3, CR3_CPOL);
      000154 AE 52 36         [ 2]  392 	ldw	x, #0x5236
      000157 F6               [ 1]  393 	ld	a, (x)
      000158 AA 04            [ 1]  394 	or	a, #0x04
      00015A F7               [ 1]  395 	ld	(x), a
                                    396 ;	ldr.c: 118: SET (UART1_CR3, CR3_CPHA);
      00015B AE 52 36         [ 2]  397 	ldw	x, #0x5236
      00015E F6               [ 1]  398 	ld	a, (x)
      00015F AA 02            [ 1]  399 	or	a, #0x02
      000161 F7               [ 1]  400 	ld	(x), a
                                    401 ;	ldr.c: 119: SET (UART1_CR3, CR3_LBCL);
      000162 72 10 52 36      [ 1]  402 	bset	0x5236, #0
                                    403 ;	ldr.c: 123: SET (UART1_CR2, CR2_TEN);
      000166 AE 52 35         [ 2]  404 	ldw	x, #0x5235
      000169 F6               [ 1]  405 	ld	a, (x)
      00016A AA 08            [ 1]  406 	or	a, #0x08
      00016C F7               [ 1]  407 	ld	(x), a
                                    408 ;	ldr.c: 124: SET (UART1_CR2, CR2_REN);
      00016D AE 52 35         [ 2]  409 	ldw	x, #0x5235
      000170 F6               [ 1]  410 	ld	a, (x)
      000171 AA 04            [ 1]  411 	or	a, #0x04
      000173 F7               [ 1]  412 	ld	(x), a
                                    413 ;	ldr.c: 125: UART1_CR3 = CR3_CLKEN;
      000174 AE 52 36         [ 2]  414 	ldw	x, #0x5236
      000177 A6 08            [ 1]  415 	ld	a, #0x08
      000179 F7               [ 1]  416 	ld	(x), a
      00017A 81               [ 4]  417 	ret
                                    418 ;	ldr.c: 130: int main () {
                                    419 ;	-----------------------------------------
                                    420 ;	 function main
                                    421 ;	-----------------------------------------
      00017B                        422 _main:
      00017B 52 06            [ 2]  423 	sub	sp, #6
                                    424 ;	ldr.c: 136: InitializeSystemClock();
      00017D CDr00r08         [ 4]  425 	call	_InitializeSystemClock
                                    426 ;	ldr.c: 137: InitializeUART();
      000180 CDr01r02         [ 4]  427 	call	_InitializeUART
                                    428 ;	ldr.c: 141: PD_DDR |= (1<<2);
      000183 AE 50 11         [ 2]  429 	ldw	x, #0x5011
      000186 F6               [ 1]  430 	ld	a, (x)
      000187 AA 04            [ 1]  431 	or	a, #0x04
      000189 F7               [ 1]  432 	ld	(x), a
                                    433 ;	ldr.c: 142: PD_CR1 |= (1<<2);
      00018A AE 50 12         [ 2]  434 	ldw	x, #0x5012
      00018D F6               [ 1]  435 	ld	a, (x)
      00018E AA 04            [ 1]  436 	or	a, #0x04
      000190 F7               [ 1]  437 	ld	(x), a
                                    438 ;	ldr.c: 143: PD_CR2 |= (1<<2);
      000191 AE 50 13         [ 2]  439 	ldw	x, #0x5013
      000194 F6               [ 1]  440 	ld	a, (x)
      000195 AA 04            [ 1]  441 	or	a, #0x04
      000197 F7               [ 1]  442 	ld	(x), a
                                    443 ;	ldr.c: 145: while (1) {
      000198                        444 00108$:
                                    445 ;	ldr.c: 148: ampere=0;
      000198 5F               [ 1]  446 	clrw	x
      000199 1F 03            [ 2]  447 	ldw	(0x03, sp), x
                                    448 ;	ldr.c: 150: ADC_CSR |= ((0x0F)&4); // select channel = 4 = PD3
      00019B AE 54 00         [ 2]  449 	ldw	x, #0x5400
      00019E F6               [ 1]  450 	ld	a, (x)
      00019F AA 04            [ 1]  451 	or	a, #0x04
      0001A1 F7               [ 1]  452 	ld	(x), a
                                    453 ;	ldr.c: 151: ADC_CR2 |= ADC_ALIGN; // Right Aligned Data
      0001A2 AE 54 02         [ 2]  454 	ldw	x, #0x5402
      0001A5 F6               [ 1]  455 	ld	a, (x)
      0001A6 AA 08            [ 1]  456 	or	a, #0x08
      0001A8 F7               [ 1]  457 	ld	(x), a
                                    458 ;	ldr.c: 152: ADC_CR1 |= ADC_ADON; // ADC ON
      0001A9 72 10 54 01      [ 1]  459 	bset	0x5401, #0
                                    460 ;	ldr.c: 153: ADC_CR1 |= ADC_ADON; // start conversion 
      0001AD 72 10 54 01      [ 1]  461 	bset	0x5401, #0
                                    462 ;	ldr.c: 154: while(((ADC_CSR)&(1<<7))== 0); // Wait till EOC
      0001B1                        463 00101$:
      0001B1 AE 54 00         [ 2]  464 	ldw	x, #0x5400
      0001B4 F6               [ 1]  465 	ld	a, (x)
      0001B5 48               [ 1]  466 	sll	a
      0001B6 24 F9            [ 1]  467 	jrnc	00101$
                                    468 ;	ldr.c: 156: ampere |= (unsigned int)ADC_DRL;
      0001B8 AE 54 05         [ 2]  469 	ldw	x, #0x5405
      0001BB F6               [ 1]  470 	ld	a, (x)
      0001BC 02               [ 1]  471 	rlwa	x
      0001BD 4F               [ 1]  472 	clr	a
      0001BE 01               [ 1]  473 	rrwa	x
      0001BF 16 03            [ 2]  474 	ldw	y, (0x03, sp)
      0001C1 17 01            [ 2]  475 	ldw	(0x01, sp), y
      0001C3 1A 02            [ 1]  476 	or	a, (0x02, sp)
      0001C5 90 97            [ 1]  477 	ld	yl, a
      0001C7 9E               [ 1]  478 	ld	a, xh
      0001C8 1A 01            [ 1]  479 	or	a, (0x01, sp)
      0001CA 90 95            [ 1]  480 	ld	yh, a
                                    481 ;	ldr.c: 157: ampere |= (unsigned int)ADC_DRH<<8;
      0001CC AE 54 04         [ 2]  482 	ldw	x, #0x5404
      0001CF F6               [ 1]  483 	ld	a, (x)
      0001D0 5F               [ 1]  484 	clrw	x
      0001D1 97               [ 1]  485 	ld	xl, a
      0001D2 58               [ 2]  486 	sllw	x
      0001D3 58               [ 2]  487 	sllw	x
      0001D4 58               [ 2]  488 	sllw	x
      0001D5 58               [ 2]  489 	sllw	x
      0001D6 58               [ 2]  490 	sllw	x
      0001D7 58               [ 2]  491 	sllw	x
      0001D8 58               [ 2]  492 	sllw	x
      0001D9 58               [ 2]  493 	sllw	x
      0001DA 17 05            [ 2]  494 	ldw	(0x05, sp), y
      0001DC 9F               [ 1]  495 	ld	a, xl
      0001DD 1A 06            [ 1]  496 	or	a, (0x06, sp)
      0001DF 90 97            [ 1]  497 	ld	yl, a
      0001E1 9E               [ 1]  498 	ld	a, xh
      0001E2 1A 05            [ 1]  499 	or	a, (0x05, sp)
      0001E4 90 95            [ 1]  500 	ld	yh, a
                                    501 ;	ldr.c: 159: ADC_CR1 &= ~(1<<0); // ADC Stop Conversion
      0001E6 AE 54 01         [ 2]  502 	ldw	x, #0x5401
      0001E9 F6               [ 1]  503 	ld	a, (x)
      0001EA A4 FE            [ 1]  504 	and	a, #0xfe
      0001EC F7               [ 1]  505 	ld	(x), a
                                    506 ;	ldr.c: 160: ampere &= 0x03ff; // 0 bits resolution so above 0x0400 is nothing
      0001ED 90 9E            [ 1]  507 	ld	a, yh
      0001EF A4 03            [ 1]  508 	and	a, #0x03
      0001F1 90 95            [ 1]  509 	ld	yh, a
                                    510 ;	ldr.c: 163: PD_ODR |= (1<<2);
      0001F3 AE 50 0F         [ 2]  511 	ldw	x, #0x500f
      0001F6 F6               [ 1]  512 	ld	a, (x)
                                    513 ;	ldr.c: 161: if (ampere > 0x2ff) //lights are on
      0001F7 90 A3 02 FF      [ 2]  514 	cpw	y, #0x02ff
      0001FB 2D 08            [ 1]  515 	jrsle	00105$
                                    516 ;	ldr.c: 163: PD_ODR |= (1<<2);
      0001FD AA 04            [ 1]  517 	or	a, #0x04
      0001FF AE 50 0F         [ 2]  518 	ldw	x, #0x500f
      000202 F7               [ 1]  519 	ld	(x), a
      000203 20 06            [ 2]  520 	jra	00106$
      000205                        521 00105$:
                                    522 ;	ldr.c: 166: PD_ODR &= ~(1<<2);
      000205 A4 FB            [ 1]  523 	and	a, #0xfb
      000207 AE 50 0F         [ 2]  524 	ldw	x, #0x500f
      00020A F7               [ 1]  525 	ld	(x), a
      00020B                        526 00106$:
                                    527 ;	ldr.c: 168: delay(4000);
      00020B 4B A0            [ 1]  528 	push	#0xa0
      00020D 4B 0F            [ 1]  529 	push	#0x0f
      00020F CDr00r52         [ 4]  530 	call	_delay
      000212 5B 02            [ 2]  531 	addw	sp, #2
      000214 CCr01r98         [ 2]  532 	jp	00108$
      000217 5B 06            [ 2]  533 	addw	sp, #6
      000219 81               [ 4]  534 	ret
                                    535 	.area CODE
                                    536 	.area INITIALIZER
                                    537 	.area CABS (ABS)
